name: Generate video env: HF_SPACE: "KingNish/wan2-2-fast" API_NAME: "/generate_video" PROMPT: "make this image come alive, cinematic motion, smooth animation" IMAGE_URL: "https://raw.githubusercontent.com/gradio-app/gradio/main/test/test_files/bus.png" # можно заменить или оставить пустым WIDTH: "896" HEIGHT: "896" DURATION_SECONDS: "2" NEGATIVE_PROMPT: "Bright tones, overexposed, static, blurred details, subtitles, style, works" GUIDANCE_SCALE: "0" STEPS: "4" SEED: "42" RANDOMIZE_SEED: "true" HF_TOKEN: ${{ secrets.HF_TOKEN }} # если Space требует токен run: | python - <<'PY' import os, requests from gradio_client import Client, handle_file
space = os.getenv("HF_SPACE") api_name = os.getenv("API_NAME") token = os.getenv("HF_TOKEN") or None
client = Client(space, hf_token=token)
Собираем аргументы так же, как в примере на странице
kwargs = { "prompt": os.getenv("PROMPT"), "height": int(os.getenv("HEIGHT", "896")), "width": int(os.getenv("WIDTH", "896")), "negative_prompt": os.getenv("NEGATIVE_PROMPT") or None, "duration_seconds": float(os.getenv("DURATION_SECONDS", "2")), "guidance_scale": float(os.getenv("GUIDANCE_SCALE", "0")), "steps": int(os.getenv("STEPS", "4")), "seed": int(os.getenv("SEED", "42")), "randomize_seed": os.getenv("RANDOMIZE_SEED", "true").lower() == "true", }
image_url = os.getenv("IMAGE_URL") if image_url: kwargs["input_image"] = handle_file(image_url) else: kwargs["input_image"] = None # если входное изображение не нужно
out = client.predict(api_name=api_name, **kwargs)
Сохраняем видео, если в ответе есть ссылка
def download(url, name): r = requests.get(url, timeout=600); r.raise_for_status() open(name, "wb").write(r.content)
saved = 0 if isinstance(out, list): for i, v in enumerate(out): if isinstance(v, str) and v.startswith("http"): download(v, f"result{i}.mp4"); saved += 1 elif isinstance(v, dict): for k, val in v.items(): if isinstance(val, str) and val.startswith("http"): download(val, f"result{i}{k}.mp4"); saved += 1 elif isinstance(out, str) and out.startswith("http"): download(out, "result.mp4"); saved = 1 elif isinstance(out, dict): for k, v in out.items(): if isinstance(v, str) and v.startswith("http"): download(v, f"result{k}.mp4"); saved += 1
if saved == 0: print("Ответ не содержит ссылок на видео. Проверьте api_name и параметры.", flush=True) else: print(f"Сохранено файлов: {saved}", flush=True) PY
Подсказки
Если не используете картинку, оставьте IMAGE_URL пустым — многие сборки WAN 2.2 умеют генерировать по одному prompt (но это зависит от конкретного Space).
Width и height должны быть кратны 32 (например, 768, 832, 896).
Если получите ошибку TypeError/validation, сравните порядок и имена аргументов с блоком Use via API — передавайте их так же, как в примере, по именам.
Если Space приватный/с авторизацией — добавьте HF_TOKEN в Secrets репозитория и он подтянется автоматически.
